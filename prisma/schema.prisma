generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Image {
  id           String   @id
  originalUrl  String   @unique
  thumbnailUrl String?  @unique
  smallUrl     String?  @unique
  mediumUrl    String?  @unique
  largeUrl     String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  stamp        Stamp    @relation("StampImage", fields: [stampId], references: [id])
  stampId      String
}

model Stamp {
  id           String    @id
  userId       String
  game         String
  title        String
  description  String
  category     String
  region       String
  imageUrl     String?
  stampFileUrl String
  goodCategory String?
  good         String?
  population   String?
  capital      String?
  collection   Boolean   @default(false)
  townhall     Boolean   @default(false)
  tradeUnion   Boolean   @default(false)
  createdAt    DateTime  @default(now())
  changedAt    DateTime?
  updatedAt    DateTime  @updatedAt
  modded       Boolean   @default(false)
  downloads    Int       @default(0)
  user         User      @relation("StampCreator", fields: [userId], references: [id], onDelete: NoAction)
  likedBy      User[]    @relation("StampLiker")
  images       Image[]   @relation("StampImage")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  usernameURL   String?   @unique
  biography     String?
  accounts      Account[]
  sessions      Session[]
  listedStamps  Stamp[]   @relation("StampCreator")
  likedStamps   Stamp[]   @relation("StampLiker")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
