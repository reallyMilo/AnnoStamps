generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Image {
  id           String   @id
  originalUrl  String   @unique
  thumbnailUrl String?  @unique
  smallUrl     String?  @unique
  mediumUrl    String?  @unique
  largeUrl     String?  @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  stamp        Stamp    @relation("StampImage", fields: [stampId], references: [id])
  stampId      String
}

model Notification {
  id        String   @id
  userId    String
  channel   String
  user      User     @relation(fields: [userId], references: [id])
  body      Json
  targetUrl String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id            String    @id
  content       String
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  stampId       String
  stamp         Stamp     @relation(fields: [stampId], references: [id])
  parentId      String?
  parentComment Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies       Comment[] @relation("CommentReplies")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Stamp {
  id                  String    @id
  userId              String
  game                String
  title               String
  unsafeDescription   String
  markdownDescription String
  category            String
  region              String
  stampFileUrl        String
  good                String?
  capital             String?
  createdAt           DateTime  @default(now())
  changedAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  modded              Boolean   @default(false)
  downloads           Int       @default(0)
  user                User      @relation("StampCreator", fields: [userId], references: [id], onDelete: NoAction)
  likedBy             User[]    @relation("StampLiker")
  images              Image[]   @relation("StampImage")
  comments            Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: NoAction)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Preference {
  id      String  @id
  channel String
  enabled Boolean @default(true)
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: NoAction)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@unique([userId, channel])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  username      String?        @unique
  usernameURL   String?        @unique
  biography     String?
  preferences   Preference[]
  accounts      Account[]
  sessions      Session[]
  listedStamps  Stamp[]        @relation("StampCreator")
  likedStamps   Stamp[]        @relation("StampLiker")
  comments      Comment[]
  notifications Notification[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
